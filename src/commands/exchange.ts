import { Markup, Telegraf, Context } from "telegraf";
import crypto from "crypto";
import { giveExchangeMenu } from "../keyboards/giveExchangeMenu";
import { MySessionContext } from "../utils/types";
import { sendWebMenu } from "../keyboards/sendWebMenu";
import { config } from "../utils/config";

const { usdtWebs, mainMenuBtn, backBtn } = config;

export const exchangeCommand = (bot: Telegraf<MySessionContext>) => {
  bot.hears("üí∏ –ö—É–ø–∏—Ç—å HELPA", (ctx) => {
    ctx.session = {} as any;
    ctx.session.state = "selectingSendCurrency";
    ctx.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è");
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ üëá", giveExchangeMenu);
  });

  bot.hears(["USDTüí≤"], (ctx) => {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (ctx.session.state === "selectingSendCurrency") {
      ctx.session.state = "selectingWebCurrency";
      ctx.session.sendCurrency = ctx.message.text;

      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è
      let menu;
      switch (ctx.session.sendCurrency) {
        case "USDTüí≤":
          menu = sendWebMenu(usdtWebs);
          break;
      }
      // ctx.session.menuReceiveCurrency = menu;
      ctx.reply(
        `–í—ã –æ—Ç–¥–∞—ë—Ç–µ ${ctx.session.sendCurrency}
–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –º–æ–Ω–µ—Ç—É üëá`,
        menu
      );
    }
  });
  bot.hears(usdtWebs, (ctx) => {
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (ctx.session.state === "selectingWebCurrency") {
      ctx.session.state = "enteringAmount";
      ctx.session.sendWebCurrency = ctx.message.text;

      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è
      let limitFrom = 0;
      let limitTo = 0;
      let currencyName = "";

      switch (ctx.session.sendCurrency) {
        case "USDTüí≤":
          limitFrom = 100;
          limitTo = 50000;
          currencyName = "HELPA";

          break;
      }
      ctx.session.currencyName = currencyName;
      ctx.session.limitFrom = limitFrom;
      ctx.session.limitTo = limitTo;
      ctx.reply(
        `‚úçÔ∏è –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—É–º–º—É, –≤ ${ctx.session.sendCurrency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –æ—Ç ${ctx.session.limitFrom} –¥–æ ${ctx.session.limitTo} 
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É –≤ ${ctx.session.currencyName} –∂–º–∏ ¬´–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}¬ª`,
        Markup.keyboard([
          [`–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}`],
          [mainMenuBtn, backBtn],
        ]).resize()
      );
    }
  });
  bot.on("text", async (ctx) => {
    let limitToRecieve;
    let limitFromRecieve;
    if (ctx.session.state === "enteringAmount") {
      const sendCurrency = ctx.session.sendCurrency;
      const rate = await getExchangeRate(sendCurrency);
      if (ctx.message.text === backBtn) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å middleware –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ
        return;
      }
      if (ctx.message.text === `–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –≤ ${ctx.session.currencyName}`) {
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
        ctx.session.state = "enteringReceiveAmount";
        
      }
    }
  });
};

const getExchangeRate = async (value: string): Promise<number> => {
  const res = 0;
  if (value === "USDTüí≤") {
    const res = await Promise.resolve(1000);
    console.log(res);
  }
  return res;
};
